Lets say we have developed an app.py file which when started (run), continuosly listens at port 8081. (Basically acting as a backend server.)
Now if we want to easily start and stop this server using systemctly then we have to configure our app as systemd service.
We can configure an app as a systemd service. All systemd services can be managed easily by systemctl commands. 
All systemd services are generally present at /etc/systemd/system/
To configure an app as a systemctl service, we need to create an app.service file. 


app.service

[Unit]
Description=My python web application - This is description.

[Service]
ExecStart=/usr/bin/python3 /opt/code/my_app.py - code to run your app.
ExecStartPre=/bin/bash /opt/code/configure_db.sh - this script will before the app starts (You can specify dependencies required here)
ExecStartPost=/bin/bash /opt/code/email_status.sh - this script runs after the app got started. 
Restart=always - to specify the application to automatically restart once it crashes.

[Install]
WantedBy=multi-user.target - this means that we are configuring that our app will run after a service.

systemctl deamon-reload - to restart the daemon services so most recent chanes are applied.

Command to start or stop an app which is configured as systemd service 
systemctly start app
systemctly stop app

Command to start an app automatically everytime machine boots up
systemctly enable app
To disable this auto startup mechanism on bootup
systemctly disable app

To check the status of the service
systemctly status app


